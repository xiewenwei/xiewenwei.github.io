<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 程序人生]]></title>
  <link href="http://xiewenwei.github.com//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://xiewenwei.github.com//"/>
  <updated>2016-02-21T23:25:52+08:00</updated>
  <id>http://xiewenwei.github.com//</id>
  <author>
    <name><![CDATA[vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样才是 ruby 中捕获异常的正确姿势？]]></title>
    <link href="http://xiewenwei.github.com//blog/2016/02/21/how-to-rescue-exception-in-ruby/"/>
    <updated>2016-02-21T22:06:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2016/02/21/how-to-rescue-exception-in-ruby</id>
    <content type="html"><![CDATA[<p>在开发和使用微服务间通信组件 <a href="https://github.com/xiewenwei/sneakers_packer">SneakersPacker</a> 过程中遇到异常处理的一些问题，通过解决这些问题让我对 ruby 中捕获异常和定义异常有新的认识。</p>

<p>当初遇到的问题是这样的：薄荷的一个子系统 status 中原本使用 http api call 获取 record 子系统的一些数据，应用 SneakersPacker 之后，把代码改成了 rpc call。刚开始的时候 SneakersPacker 还有一些问题，为了防止 rpc call 出状况，在代码中提供了一层保护机制，也就是当 SneakersPacker.remote_call 触发异常之后，通过 http api call 获取数据。代码很简单，如下所示：</p>

<p>```ruby
  begin</p>

<pre><code>res = SneakersPacker.remote_call "record.get_simple_profile", params_data
</code></pre>

<p>  rescue</p>

<pre><code>res = HTTPProxy::Record.get "api/v1/users/simple_profile", params_data
</code></pre>

<p>  end
```
但是实际运行结果很让人诧异，remote_call 的确触发了异常，但是代码中的 rescue 并没有捕获到异常，而是直接导致程序 500 错误，大量异常记录在日志和监控系统中，让人百思不得其解。在那之前我以为孤立的 rescue 会捕获全部异常的，仔细研究网络上的一些文档后，发现并不是这样，rescue 其实只捕获 StandardError 类型的异常。再去查阅 SneakersPacker 的代码，发现原来报了很多的异常 RemoteCallTimeoutError 是这样定义的：</p>

<p><code>ruby
  class RemoteCallTimeoutError &lt; Exception; end
</code></p>

<p>RemoteCallTimeoutError 选择父类 Exception 是错误的，应该选择 StandardError，改成下面之后 RemoteCallTimeoutError 象期望的一样被捕获了。</p>

<p><code>ruby
  class RemoteCallTimeoutError &lt; StandardError; end
</code></p>

<p>为了说明 rescue 这个关键字的行为，我们看下面几个例子：</p>

<p>```ruby</p>

<h1>代码1</h1>

<p>begin
  success_job
rescue
  fail_job
end
```</p>

<p>```ruby</p>

<h1>代码2</h1>

<p>begin
  success_job
rescue => e
  fail_job
  puts “e is #{e.inspect}"
end
```</p>

<p>```ruby</p>

<h1>代码3</h1>

<p>begin
  success_job
rescue StandardError => e
  fail_job
  puts “e is #{e.inspect}"
end
```</p>

<p>```ruby</p>

<h1>代码4</h1>

<p>begin
  success_job
rescue Exception => e
  fail_job
  puts “e is #{e.inspect}"
end
```</p>

<p>代码1，代码2和代码3的 rescue 都只捕获 StandardError 类别的异常，而代码4明显不同，代码4会捕获所有的异常。</p>

<p>一些直接继承自 Exception 而不是 StandardError 的异常如下，都是系统层级严重错误，不应该由应用捕获。</p>

<p>```
SystemStackError
NoMemoryError
SecurityError
ScriptError
  NotImplementedError
  LoadError</p>

<pre><code>Gem::LoadError
</code></pre>

<p>  SyntaxError
SignalException
  Interrupt
SystemExit
  Gem::SystemExitException
```</p>

<p>综上所述，总结一些 ruby 中捕获异常的原则（正确姿势）</p>

<ol>
<li>最好的 rescue 姿势，捕获明确指定的异常，rescue OneError => e</li>
<li>次好的 rescue 姿势，捕获 StandardError，通过 rescue 或 rescue => e</li>
<li><strong>千万千万不要</strong> rescue Exception => e，除非真的知道自己在干嘛</li>
<li>自己定义的异常应该继承自 StandardError ，而不是 Exception。</li>
</ol>


<p>end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 中的 4 种相等性判断方法]]></title>
    <link href="http://xiewenwei.github.com//blog/2015/03/22/four-equality-operations-in-ruby/"/>
    <updated>2015-03-22T23:14:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2015/03/22/four-equality-operations-in-ruby</id>
    <content type="html"><![CDATA[<p>很早就知道 ruby 有 4 种相等性判断方法，分别是：“==”，“===”，“equal?” 和 “eql?”，平常程序中都有使用，但是感觉对其缺乏深入理解，今天读 rails 部分源码的时候拿捏不定其中一个判断的意思，于是趁机深入研究了一番，总算觉得比较清楚了，今天做一下笔记，以作备忘。</p>

<h2>“==” 最常见的相等性判断</h2>

<p>“==” 使用最频繁，它通常用于对象的值相等性（语义相等）判断，在 Object 的方法定义中，“==” 比较两个对象的 object_id 是否一致，通常子类都会重写覆盖这个方法，通过比较内部值来判断对象是否相等。</p>

<p>比如 ActiveRecord::Base 对 "==" 的定义</p>

<p>```ruby
  def ==(comparison_object)</p>

<pre><code>super ||
  comparison_object.instance_of?(self.class) &amp;&amp;
  id.present? &amp;&amp;
  comparison_object.id == id
</code></pre>

<p>  end
```
通过 model 的 id 属性比较两个 ActiveRecord::Base 实例是否相等。</p>

<h2>“===” 用于 case 语句的相容判断</h2>

<p>“===” 主要用于 case 语句中对象的相容比较，看代码比较容易理解。</p>

<p>```ruby
def what_is(obj)
  case obj</p>

<pre><code>when /abc/
  puts "include abc"
when 3..5
  puts "in 3..5"
when Symbol
  puts "It is a symbol"
else
  puts "unkonwn"
</code></pre>

<p>  end
end</p>

<p>what_is("abcde") # =>  "include abc"
what_is(4)       # =>  "in 3..5"
what_is(:a)      # =>  "It is a symbol"
what_is(100)     # =>  "unknown"
```</p>

<p>case 背后是拿每一个 when 后面的对象与 obj 进行 === 方法计算比较，比如上面的代码就是
分别求 <code>/abc/.===(obj)</code>，<code>(3..5).===(obj)</code>，<code>Symbol.===(obj)</code>。</p>

<p>关键得看 <code>===</code> 方法里如何定义，<code>Class</code> 类中，<code>===</code> 定义为 obj.is_a?(klass)，所以 case 可以现实 obj 的类型判断。</p>

<p>特别要注意的是和其他相等判断不同 “===” 通常没法交换，也就是很可能
  <code>a.===(b) != b.===(a)</code> ，比如  <code>/abc/ === "abcd"</code> 为 true，但 <code>"abcd" === /abc/</code> 为 false。</p>

<h2>“equal?” 相同对象判断</h2>

<p>“equal?” 其实是最简单的，但是也是最容易让人搞混的判断。说它简单是因为这个方法的语义是比较两个对象是否相同（是否有相同的 object_id），Object 的方法适用所有对象，不应该对其重写覆盖。说它容易让人搞混，是因为 ruby 和 java 中 “==” 和 "equal?" 方法的语义正好是相反的，ruby 中 “equal?” 表示对象引用相同，而 java 表示对象值相同。</p>

<h2>“eql?” 对象 hash 值判断</h2>

<p><code>eql?</code> 用于对象 hash 值判断，如果两个对象的 hash 值相等，就返回 true，否则返回 false。Object 的定义里，“eql?” 和 “==” 是等价的。通常可以把 “eql?” 看作比 “==” 更严格的相等，比如:
<code>ruby
1 == 1.0     #=&gt; true
1.eql? 1.0   #=&gt; false
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构系统广播功能]]></title>
    <link href="http://xiewenwei.github.com//blog/2015/02/01/refactor-broadcast-feature/"/>
    <updated>2015-02-01T21:16:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2015/02/01/refactor-broadcast-feature</id>
    <content type="html"><![CDATA[<p>以前薄荷伙伴子系统的广播功能使用 redis 存储数据，随着时间推移数据积累，消耗内存十分严重，属于典型的 redis 误用。现在进行大幅重构，更改为 cache + storage 的存储方式，取消了 redis 存储。重构后，消耗资源大幅下降，性能上还有所改进。</p>

<p>先说说广播功能特性。广播功能主要用于薄荷向全体用法传递的消息（包括各种广告，告示和提醒等），当系统管理员在后台发出一条广播后，用户 app 上的消息图标显示小红点，当用户点击图标进入广播列表查看消息内容后，小红点消除。</p>

<p>重构前，广播功能采用了 redis 存储方案，为每一位用户建立一个已读广播集合 set，该 set 中存放用户已读的广播 id。最常见的操作是获取某位用户未读广播和数量，其方法是：使用全体 广播 id 集合与已读广播 id 集合比较，差异部分就是未读广播，对其计数得到未读广播数量。</p>

<p>这种方法的问题有两个：一是 redis 消耗内存巨大，随着用户数增加和发送广播数量增加，内存一直累积；二是当广播数量增加到比较大的数量后，获取未读广播很慢。</p>

<p>对其重构如下：去除了 redis 存储，在数据库中存储每一个用户最新访问广播的时间 last_read_time，建立一个全体的广播列表缓存，广播列表只存放广播 id 和 created_time，列表根据 created_time 从新到旧排序。获取某个用户未读广播和其数量方法：把广播列表缓存的生成时间 created_time 和用户的 last_read_time 比较，比 last_read_time 大的属于未读广播，比 last_read_time 小的属于已读广播。</p>

<p>这次重构，去除 redis 存储，大幅减少内存使用，算法调整让常见操作速度更快，效果很棒。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中 mattr_accessor 一处文档错误]]></title>
    <link href="http://xiewenwei.github.com//blog/2015/01/11/mattr-accessor-in-ruby-on-rails-activesupport/"/>
    <updated>2015-01-11T21:49:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2015/01/11/mattr-accessor-in-ruby-on-rails-activesupport</id>
    <content type="html"><![CDATA[<h2>发现错误</h2>

<p>最近写一个 gem 的时候偶然接触到 Rails ActiveSupport 扩展 module 的 mattr_accessor 系列方法，包括 mattr_accessor、mattr_reader 和 mattr_writer。
记得以前探索 Rails 源代码的时候经常遇到 mattr_accessor 方法，当时并没有细究，这次碰巧要自己用到，所以仔细研究了其文档和实现源码，居然发现文档描述有明显的错误。</p>

<p>Rails 的官方文档中提到，mattr_accessor 用于为类属性定义类和实例对象两者的访问器，然后还提供一段示例代码演示其用法。</p>

<p><code>ruby
mattr_accessor(*syms, &amp;blk) public
Defines both class and instance accessors for class attributes.
</code>
演示代码如下：
```ruby</p>

<pre><code>module HairColors
  mattr_accessor :hair_colors
end

class Person
  include HairColors
end

Person.hair_colors = [:brown, :black, :blonde, :red]
Person.hair_colors     # =&gt; [:brown, :black, :blonde, :red]
Person.new.hair_colors # =&gt; [:brown, :black, :blonde, :red]
</code></pre>

<p>```</p>

<p>当我运行该代码的时候，发现无法运行，报错在 <code>Person.hair_colors</code> 处，信息如下：</p>

<p><code>ruby
[5] pry(main)&gt; Person.hair_colors = [:brown, :black, :blonde, :red]
NoMethodError: undefined method `hair_colors=' for Person:Class
from (pry):7:in `__pry__'
</code></p>

<p>刚开始还有点不相信，分别在 Rails 4.1.8，4.2.0 和 3.2.x，Ruby 1.9.3，2.0.0 和 2.1.5 下运行， 都出现这个错误，这下确信文档描述应该是有问题的。我想把问题彻底搞清楚，于是仔细查看 Rails ActiveSupport 中相关的源代码，发现的确是文档描述的行为和程序实际行为不符。</p>

<h2>探寻原因</h2>

<p>mattr_accessor 系列方法的代码在 <code>rails/activesupport/lib/active_support/core_ext/module/attribute_accessors.rb</code> 文件中，相关的代码并不复杂，部分代码如下：</p>

<p>```ruby
  # 此处忽略注释
  def mattr_writer(*syms)</p>

<pre><code>options = syms.extract_options!
syms.each do |sym|
  raise NameError.new("invalid attribute name: #{sym}") unless sym =~ /^[_A-Za-z]\w*$/
  class_eval(&lt;&lt;-EOS, __FILE__, __LINE__ + 1)
    @@#{sym} = nil unless defined? @@#{sym}

    def self.#{sym}=(obj)
      @@#{sym} = obj
    end
  EOS

  unless options[:instance_writer] == false || options[:instance_accessor] == false
    class_eval(&lt;&lt;-EOS, __FILE__, __LINE__ + 1)
      def #{sym}=(obj)
        @@#{sym} = obj
      end
    EOS
  end
  send("#{sym}=", yield) if block_given?
end
</code></pre>

<p>  end</p>

<p>  # 此处忽略注释
  def mattr_accessor(*syms, &amp;blk)</p>

<pre><code>mattr_reader(*syms, &amp;blk)
mattr_writer(*syms, &amp;blk)
</code></pre>

<p>  end</p>

<p>```</p>

<p>从中可以看到，mattr_accessor 分别 call mattr_reader 和 mattr_writer，mattr_writer 的主要逻辑是定义类变量（class variable，命名为 <code>@@#{sym}</code>），然后定义类方法 （见 <code>def self.#{sym}=(obj)</code>）和普通实例方法（见 <code>def #{sym}=(obj)</code>）。当 <code>Person include HairColors</code> 的时候，普通实例方法是 mix 进 Person 的，但类方法并不会被 mix 进 Person。可以用下面更简明的例子演示 include module 并不能 mix 类方法。</p>

<p>```ruby
  module Foo</p>

<pre><code>def method1
  puts "method1 in Foo"
end

def self.method2
  puts "method2 in Foo as class method"
end
</code></pre>

<p>  end</p>

<p>  class Bar</p>

<pre><code>include Foo
</code></pre>

<p>  end</p>

<p>  Bar.new.method1  # => "method1 in Foo"</p>

<p>  Foo.method2 # => "method2 in Foo as class method"</p>

<p>  Bar.method2 # => NoMethodError: undefined method `method2' for #&lt;Bar:0x007fdb0a121488>
```</p>

<p>原来 mattr_accessor 为 HairColors 生成的 <code>def self.hair_colors</code> 类方法不能 mix 进 Person，从而导致 Person.hair_colors 出错，但是 Person.new.hair_colors 能够正常运行的。</p>

<h2>解决方法</h2>

<p>如果希望 Person 通过类方法和实例方法都能使用 hair_colors ，应该怎么做呢？
可以把 mattr_accessor 放在 included 钩子中执行，代码如下所示：</p>

<p>```ruby</p>

<pre><code>module HairColors
  extend ActiveSupport::Concern
  included do
    mattr_accessor :hair_colors
  end
end

class Person
  include HairColors
end

Person.hair_colors = [:brown, :black, :blonde, :red]
Person.hair_colors     # =&gt; [:brown, :black, :blonde, :red]
Person.new.hair_colors # =&gt; [:brown, :black, :blonde, :red]
HairColors.hair_colors # =&gt; undefined method `hair_colors' for HairColors:Module
</code></pre>

<p>```</p>

<p>它的一个问题是 <code>HairColors.hair_colors</code> 不可用了，但我发现 Rails 中大多是使用这种手法处理的，这种情况下估计不怎么要直接用到 <code>HairColors.hair_colors</code> 吧。</p>

<h2>总结</h2>

<p>Rails 官方文档中关于 mattr_accessor 的描述的确有问题，示例代码不能正确运行，而且还会误导使用者，通过仔细探索 Rails 的源代码，找到了问题的源头。我已经修正文档的错误，提交了 <code>pull request</code>，希望能够被接受。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中 MySQL 分区表使用的一个注意事项]]></title>
    <link href="http://xiewenwei.github.com//blog/2014/12/14/mysql-partition-table-in-rails/"/>
    <updated>2014-12-14T22:46:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2014/12/14/mysql-partition-table-in-rails</id>
    <content type="html"><![CDATA[<p>MySQL 的分区表是一种简单有效的处理极大数据表的特性，通过它可以使应用程序几乎很少改动就能达成对极大数据表的高效处理，但由于 Rails ActiveRecord 设计上一些惯例，可能导致一些数据处理不能利用分区表特性，反而变得很慢，在使用分区表过程中一定要多加注意。</p>

<p>下面以一个例子来说明。在 light 系统中，有一张数据表是 diet_items, 主要字段是 id, schedule_id, meal_order food_id, weight, calory 等等，它的每一条记录表示为用户生成每日的减肥计划（减肥食谱 + 运动计划）中的一条饮食项，平均一条的计划有 10 多条数据，数据量非常大，预计每天生成数据会超过 100 万条，所以对其做了分表处理，根据 schedule_id hash 分成 60 张表，也就是数据将动态分到 60 张表中。分表后 diet_items 的建表语句如下所示：</p>

<p><code>sql
CREATE TABLE `diet_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `schedule_id` int(11) NOT NULL,
  `meals_order` int(11) NOT NULL,
  `food_id` int(11) DEFAULT NULL,
  ....
  KEY id (`id`),
  UNIQUE KEY `index_diet_items_on_schedule_id_and_id` (`schedule_id`,`id`)
)
PARTITION BY HASH (schedule_id)
PARTITIONS 60;
</code>
分表之后，所有查询 diet_items 的地方都要求带上 schedule_id，比如获取某一个 schedule 的所有 diet_items，通过 schedule. diet_items，获取某一个 id 的 diet_item 也是通过  <code>schedule.diet_items.find(id)</code> 进行。生成 diet_item 也没有问题，因为生成 diet_item 都是通过 <code>schedule.diet_items.build(data)</code> 方式，在生成的时候都是带了 schedule_id 的。</p>

<p>观察 newrelic 日志，发现 diet_item 的 update 和 destroy 相关的请求特别慢，仔细分析后，发现这两种操作非常忙是由于 ActiveRecord 生成的 sql 并没有带 schedule_id 导致。
diet_item update 操作 ActiveRecord 生成的 sql 语句类似于 <code>update diet_items set … where id = &lt;id&gt;</code>。
diet_item destroy 生成的语句类似于 <code>delete diet_items where id = &lt;id&gt;</code>
因为没有带 schedule_id，导致这两种语句都需要 mysql 扫描 60 张分区表才能够完成一个语句执行，非常慢！</p>

<p>知道原因之后就好办了，把原来的 update 和 destroy 调用改为自定义版本的 update 和 destroy 调用就可以了。</p>

<ul>
<li><p><code>diet_item.update(attributes)</code> 改成 <code>DietItem.where(id: diet_item.id, schedule_id: diet_item.schedule_id).update_all(attributes)</code></p></li>
<li><p><code>diet_item.destroy</code> 改成 <code>DietItem.where(id: diet_item.id, schedule_id: diet_item.schedule_id).delete_all</code></p></li>
</ul>


<p>这样生成的 sql 都带上 schedule_id 条件，从而避免了扫描全部的分区表，性能提升立竿见影。</p>
]]></content>
  </entry>
  
</feed>
