<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 程序人生]]></title>
  <link href="http://xiewenwei.github.com//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://xiewenwei.github.com//"/>
  <updated>2014-06-23T21:46:55+08:00</updated>
  <id>http://xiewenwei.github.com//</id>
  <author>
    <name><![CDATA[vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 线程安全代码]]></title>
    <link href="http://xiewenwei.github.com//blog/2014/01/12/thread-safety-code-for-ruby-on-rails/"/>
    <updated>2014-01-12T22:52:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2014/01/12/thread-safety-code-for-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Ruby on Rails 4.0 的 rc 版本已经 release 了，Rails 4 时代最大的变化当属默认开启多线程模式。Rails 4 的多线程将给大家带来什么好处呢？至少有两方面：</p>




<ol>
<li><p>更高的系统吞吐量
Web 站点多是 IO 密集型的，多线程可以让 Application 在等待 IO 操作的同时，还能接收处理请求，大大提升系统吞吐量，增强系统稳定性和安全性。</p></li>
<li><p>更省内存
Ruby on Rails 是内存消耗大户，一个 Applicaion 占用几百兆是常事，以前使用仅使用多进程的并发模式时，整体内存消耗巨大，使用多进程+多线程的并发模式，不单系统吞吐量大大提供，系统整体使用内存也大幅下降。</p></li>
</ol>




<p>但是天下没有免费的午餐，在享用这些好处的同时，我们也必须付出一定的代价，代价就是要应付多线程编程带来的复杂性。程序中需要处理多线程可能导致问题的地方，如果程序中出现问题也变得更加难以发现调试。</p>




<p>好在需要注意的地方也不是太多，下面把这几个需要注意的地方一一说明。</p>




<h2>代码加载</h2>




<p>Ruby 的 require 并非线程安全的，在多线程中 require，可能会导致严重的不可预期的错误。例如下面的一个演示程序在 Ruby 1.9 环境下执行会发生死锁。</p>




<p>a.rb 文件：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">: a.rb&quot;</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">: requiring b&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>b.rb 文件：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">: b.rb&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="si">}</span><span class="s2">: requiring a&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>test.rb 文件：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$LOAD_PATH</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">t1</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;a&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="n">t2</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">require</span> <span class="s1">&#39;b&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="n">t1</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="n">t2</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在 Ruby 1.9 环境下运行 test.rb 将报死锁错误：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#&lt;Thread:0x007fd2da90a268&gt;: b.rb</span>
</span><span class='line'><span class="c">#&lt;Thread:0x007fd2da90a268&gt;: requiring a</span>
</span><span class='line'><span class="c">#&lt;Thread:0x007fd2da90a2e0&gt;: a.rb</span>
</span><span class='line'><span class="c">#&lt;Thread:0x007fd2da90a2e0&gt;: requiring b</span>
</span><span class='line'>test.rb:5:in <span class="sb"><code>&lt;/span&gt;join&lt;span class="s1"&gt;&amp;#39;: deadlock detected (fatal)&lt;/span&gt;
&lt;/span&gt;&lt;span class='line'&gt;&lt;span class="s1"&gt;  from test.rb:5:in</code>&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>因为 Ruby require 不是线程安全的，所以 Rails 中使用多线程环境时，需要对 require 做一定的限制，简单的说就是在 Application 启动的时候，把所有需要加载的代码全部加载完成，避免启动后还 require。Rails 4 的生产环境配置中该选项已经默认生效。需要注意的时，如果你的代码不在 Rails 默认的几个目录中，你需要手动配置你的目录进入 eager_load_path，例如：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">eager_load_paths</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/lib&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>全局变量和类变量写操作</h2>




<p>在 Rails 多线程环境，所有的全局变量（包括 $var @@var 和 类实例变量），在实例方法中都应该是只读的，尽量应该避免写操作。</p>




<p>下面是一个在实例方法中写类变量导致问题的例子：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:set_site</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_site</span>
</span><span class='line'>    <span class="vi">@site</span> <span class="o">=</span> <span class="no">Site</span><span class="o">.</span><span class="n">find_by_subdomain</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">subdomains</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@site</span><span class="o">.</span><span class="n">layout?</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">layout</span><span class="p">(</span><span class="vi">@site</span><span class="o">.</span><span class="n">layout_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">layout</span><span class="p">(</span><span class="s1">&#39;default_lay&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面代码的意图是根据域名设置不同的 layout。<code>self.class.layout(value)</code> 中，Rails 把 value 保存在类变量 <code>@@layout_</code>，然后在 render 的时候使用。</p>




<p>设想这样一种情况 UserA 的 subdomain 是 foo1，他的 layout 应该是 foo1，
UserB 的 subdomain 是 foo2，他的 layout 应该是 foo2。</p>




<p>UserA 和 UserB 同时请求应用，他们的请求分别在 Thread1 和 Thread2 中执行，执行顺序可能是：</p>




<ol>
<li>Thread1, 执行进入 set_site 方法，设置 <code>@@layout_</code> 为 foo1；</li>
<li>Thread2, 执行进入 set_site 方法，设置 <code>@@layout_</code> 为 foo2；</li>
<li>Thread1, render response，使用最新的 <code>@@layout_</code> foo2 render；</li>
<li>Thread2，render response，使用最新的 <code>@@layout_</code> foo2 render；</li>
</ol>




<p>我们期望 Thread1 使用 foo1 layout render，这样的执行结果和期望的不相符。</p>




<p>线程安全的写法是：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:set_site</span>
</span><span class='line'>  <span class="n">layout</span> <span class="ss">:site_layout</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_site</span>
</span><span class='line'>    <span class="vi">@site</span> <span class="o">=</span> <span class="no">Site</span><span class="o">.</span><span class="n">find_by_subdomain</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">subdomains</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">site_layout</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@site</span><span class="o">.</span><span class="n">layout?</span>
</span><span class='line'>      <span class="vi">@site</span><span class="o">.</span><span class="n">layout_name</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s1">&#39;default_lay&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>程序在每次需要使用 layout 时，调用实例方法 <code>site_layout</code>，避免写类变量。</p>




<h2>IO Connection</h2>




<p>Rails 应用通常会用到多个 IO Connection，比如 ActiveRecord 的数据库 Connection，缓存 Memcached 的 Connection，Redis 的 Connection 等等。这些 IO Connection 在 Rails 多线程环境下并不都是线程安全的。</p>




<p>ActiveRecord 的 Connection 是线程安全的，而且 ActiveRecord 还可配置 Connection Pool，这样可以更高效率的利用数据库连接。</p>




<p>Memcached 的 Connection memchached-client 并不是线程安全的，最新的 dalli 是线程安全的。不过 dalli 的线程安全机制是在每个读写操作时加上互斥信号控制，这意味着同一时间只有一个线程可以操作，如果操作非常频繁的话，可能有性能上的问题，这个时候可以使用一个单独的 Connection Pool Gem 解决。</p>




<p>这个 Connection Pool Gem 的地址是 https://github.com/mperham/connection_pool。</p>




<p>Redis 的 Connection 和 dalli 类似，本身通过加上互斥信号控制保证线程安全，可以通过 Connection Pool 增强效率。</p>




<h2>使用互斥信号控制非线程安全操作</h2>




<p>在程序中，如果存在某些不希望多个线程同时执行的操作，可以使用互斥信号控制其执行，这样当已经有一个线程进入执行时，其他进入的 thread 都会被 block 住，等前面的进程执行结束后才会进入执行，从而保证在一个时间只有一个线程会执行。</p>




<p>示例代码如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomeController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="vc">@@lock</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vc">@@lock</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">thread_unsafe_code</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">thread_unsafe_code</span>
</span><span class='line'>    <span class="k">if</span> <span class="vc">@@something</span> <span class="o">==</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'>      <span class="n">do_hello</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vc">@@something</span> <span class="o">==</span> <span class="s1">&#39;world&#39;</span>
</span><span class='line'>      <span class="n">do_world</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vc">@@something</span> <span class="o">=</span> <span class="s1">&#39;nothing&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>总之，Rails 的多线程为我们提供了简便的提升系统伸缩性的能力，这也意味的程序复杂性的增加，有几处地方使我们需要注意的，只有这样才能很好的利用 Rails 多线程能力。</p>




<p>参考：</p>




<ul>
<li><a href="http://m.onkey.org/thread-safety-for-your-rails/">http://m.onkey.org/thread-safety-for-your-rails/</a></li>
<li><a href="http://blog.headius.com/2008/08/qa-what-thread-safe-rails-means.html/">http://blog.headius.com/2008/08/qa-what-thread-safe-rails-means.html/</a></li>
<li><a href="http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html/">http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实例说明 Ruby 多线程的潜力和弱点]]></title>
    <link href="http://xiewenwei.github.com//blog/2013/05/25/ruby-multiple-threads-potential-and-weakness/"/>
    <updated>2013-05-25T22:52:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2013/05/25/ruby-multiple-threads-potential-and-weakness</id>
    <content type="html"><![CDATA[<p>Web 应用大多是 IO 密集型的，利用 Ruby 多进程+多线程模型将能大幅提升系统吞吐量。其原因在于：当Ruby 某个线程处于 IO Block 状态时，其它的线程还可以继续执行。但由于存在 Ruby GIL (Global Interpreter Lock)，MRI Ruby 并不能真正利用多线程进行并行计算。JRuby 去除了 GIL，是真正意义的多线程，既能应付 IO Block，也能充分利用多核 CPU 加快整体运算速度。</p>




<p>上面说得比较抽象，下面就用例子一一加以说明。</p>




<h2>Ruby 多线程和 IO Block</h2>




<p>先看下面一段代码（演示目的，没有实际用途）：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: block_io1.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 3 seconds in func1</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 2 seconds in func2</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 5 seconds in func3</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">func1</span>
</span><span class='line'><span class="n">func2</span>
</span><span class='line'><span class="n">func3</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>代码很简单，3 个方法，用 sleep 模拟耗时的 IO 操作。
运行代码（环境 MRI Ruby 1.9.3） 结果是：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">ruby</span> <span class="n">block_io1</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func1</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">2</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func2</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">5</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func3</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m11</span><span class="o">.</span><span class="mi">681</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m3</span><span class="o">.</span><span class="mi">086</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">152</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>比较慢，时间都耗在 sleep 上了，总共花了 10 多秒。</p>




<p>采用多线程的方式，改写如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: block_io2.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 3 seconds in func1</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func2</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 2 seconds in func2</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">func3</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;sleep 5 seconds in func3</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">func1</span> <span class="p">}</span>
</span><span class='line'><span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">func2</span> <span class="p">}</span>
</span><span class='line'><span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">func3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">join</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>运行的结果是：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">ruby</span> <span class="n">block_io2</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func1</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">2</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func2</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">5</span> <span class="n">seconds</span> <span class="k">in</span> <span class="n">func3</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m6</span><span class="o">.</span><span class="mi">543</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m3</span><span class="o">.</span><span class="mi">169</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">147</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>总共花了 6 秒多，明显快了许多，只比最长的 sleep 5 秒多了一点。</p>




<p>上面的例子说明，<strong>Ruby 的多线程能够应付 IO Block，当某个线程处于 IO Block 状态时，其它的线程还可以继续执行，从而使整体处理时间大幅缩短</strong>。</p>




<h2>Ruby GIL 的影响</h2>




<p>还是先看一段代码（演示目的）：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: gil1.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;zlib&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">4096000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="mi">16</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">Deflate</span><span class="o">.</span><span class="n">deflate</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>代码先随机生成一些数据，然后对其进行压缩，压缩是非常耗 CPU 的，在我机器(双核 CPU, MRI Ruby 1.9.3)运行结果如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">ruby</span> <span class="n">gil1</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m8</span><span class="o">.</span><span class="mi">572</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m8</span><span class="o">.</span><span class="mi">359</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">102</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>更改为多线程版本，代码如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File: gil2.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;zlib&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">4096000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="mi">16</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="no">Zlib</span><span class="o">::</span><span class="no">Deflate</span><span class="o">.</span><span class="n">deflate</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>多线程的版本运行结果如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">ruby</span> <span class="n">gil2</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m8</span><span class="o">.</span><span class="mi">616</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m8</span><span class="o">.</span><span class="mi">377</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">211</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p> 从结果可以看出，由于 MRI Ruby GIL 的存在，Ruby 多线程并不能重复利用多核 CPU，使用多线程后整体所花时间并不缩短，反而由于线程切换的影响，所花时间还略有增加。</p>




<h2>JRuby 去除了 GIL</h2>




<p>使用 JRuby (我的机器上是 JRuby 1.7.0)运行 gil1.rb 和 gil2.rb，得到很不一样的结果。</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">jruby</span> <span class="n">gil1</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m12</span><span class="o">.</span><span class="mi">225</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m14</span><span class="o">.</span><span class="mo">060</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">615</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="n">jruby</span> <span class="n">gil2</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">real</span>  <span class="mi">0</span><span class="n">m7</span><span class="o">.</span><span class="mi">584</span><span class="n">s</span>
</span><span class='line'><span class="n">user</span>  <span class="mi">0</span><span class="n">m22</span><span class="o">.</span><span class="mi">822</span><span class="n">s</span>
</span><span class='line'><span class="n">sys</span> <span class="mi">0</span><span class="n">m0</span><span class="o">.</span><span class="mi">819</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以看到，JRuby 使用多线程时，整体运行时间有明显缩短（7.58 比 12.22），这是由于 JRuby 去除了 GIL，可以真正并行的执行多线程，充分利用了多核 CPU。</p>




<p>总结：<strong>Ruby 多线程可以在某个线程 IO Block 时，依然能够执行其它线程，从而降低 IO Block 对整体的影响，但由于 MRI Ruby GIL 的存在，MRI Ruby 并不是真正的并行执行，JRuby 去除了 GIL，可以做到真正的多线程并行执行</strong>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0的新特性，用例子说明]]></title>
    <link href="http://xiewenwei.github.com//blog/2013/05/05/new-features-of-ruby-2-dot-0/"/>
    <updated>2013-05-05T22:52:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2013/05/05/new-features-of-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p>Ruby 2.0 发布已经有一段时间了，之前从各种报道上大概了解到它的一些主要特性，但是没有认真仔细研究，所以印象并不深。这个周末好好研究了一番，写下这篇 Blog，算是这次学习的笔记。</p>




<p>Ruby 2.0 升级变动并不是很大，至少比 Ruby 1.8 到 1.9 的变动小，之所以把版本号定为 2.0，是为了纪念 Ruby 诞生 20 周年，所以特意选择了 Ruby 诞生 20 周日的日子 &#8211; 2013年2月24日发布。</p>




<p>虽然说变化不是特别大，但是新的特性还是挺让人兴奋的，因为它们对开发带来不少便利，让 Ruby 变得越来越性感。主要的新特性有 4 个，下面一一讲解。</p>




<h2>1. Keyword Arguments</h2>




<p><code>Keyword Arguments</code> 特性让 Ruby 2.0 开始支持关键字参数，这对处理有默认值的参数带来非常大的便利。相比于以前使用 Hash 传值方法，Keyword Arguments 可以让代码更直观简洁。</p>




<p>例子1：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9:</span>
</span><span class='line'>  <span class="c1"># (From action_view/helpers/text_helper.rb)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cycle</span><span class="p">(</span><span class="n">first_value</span><span class="p">,</span> <span class="o"><em></span><span class="n">values</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="n">extract_options!</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s1">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ruby 2.0:</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cycle</span><span class="p">(</span><span class="n">first_value</span><span class="p">,</span> <span class="o"></em></span><span class="n">values</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;default&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>例子2：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9</span>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="n">opts</span> <span class="o">=</span> <span class="p">{</span><span class="n">fmt</span><span class="p">:</span> <span class="s1">&#39;html&#39;</span><span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="no">Renderer</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="n">opts</span><span class="o">[</span><span class="ss">:fmt</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ruby 2.0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">fmt</span><span class="p">:</span> <span class="s1">&#39;html&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="no">Renderer</span><span class="o">.</span><span class="n">for</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>例子3：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9</span>
</span><span class='line'><span class="k">def</span> <span class="nf">accepts_nested_attributes_for</span><span class="p">(</span><span class="o"><em></span><span class="n">attr_names</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:allow_destroy</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:update_only</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">options</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">attr_names</span><span class="o">.</span><span class="n">extract_options!</span><span class="p">)</span>
</span><span class='line'>  <span class="n">options</span><span class="o">.</span><span class="n">assert_valid_keys</span><span class="p">(</span>
</span><span class='line'>    <span class="ss">:allow_destroy</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:reject_if</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:limit</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:update_only</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ruby 2.0</span>
</span><span class='line'><span class="k">def</span> <span class="nf">accepts_nested_attributes_for</span><span class="p">(</span><span class="o"></em></span><span class="n">attr_names</span><span class="p">,</span>
</span><span class='line'>  <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>  <span class="n">update_only</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">reject_if</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="n">limit</span><span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'> <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>2. Refinement</h2>




<p>Refinement 的目标是通过减少补丁的应用范围使打动态补丁（monkey patching）更为安全。下面是由Matz给出的一个例子，MathN模块包含进来之后“/”操作符才能在Fixnum上使用：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MathN</span>
</span><span class='line'>  <span class="n">refine</span> <span class="no">Fixnum</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">/</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="n">quo</span><span class="p">(</span><span class="n">other</span><span class="p">)</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="n">using</span> <span class="no">MathN</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo</span>
</span><span class='line'>    <span class="nb">p</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Rails 中有不少对 Ruby 的 monkey patching，使用 Refinement 特性重写的话可以让这些代码更安全。
但是目前 Refinement 还不是很成熟，属于体验特性，所以最好不要在生产环境使用。</p>




<h2>3. Module Prepend</h2>




<p><code>Module Prepend</code> 特性让常见的 alias_method patten 扩展一个已用方法的写法变得简洁不少。
例如，下面的代码想对 Template 的 render 方法扩展计时钩子，使用 Ruby 1.9 的写法非常臃肿。</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Template</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">erb</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@erb</span> <span class="o">=</span> <span class="n">erb</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render</span> <span class="n">values</span>
</span><span class='line'>    <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@erb</span><span class="p">)</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">RenderProfiler</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span> <span class="n">base</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:render_without_profiling</span><span class="p">,</span> <span class="ss">:render</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:alias_method</span><span class="p">,</span> <span class="ss">:render</span><span class="p">,</span> <span class="ss">:render_with_profiling</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render_with_profiling</span> <span class="n">values</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="n">render_without_profiling</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span>
</span><span class='line'>      <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Rendered in </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="si">}</span><span class="s2">s.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Template</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">RenderProfiler</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Template</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'>  <span class="c1">#=&gt; [Template, RenderProfiler, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>使用 Ruby 2.0 的写法将变得非常简洁。</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">RenderProfiler</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render</span> <span class="n">values</span>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">values</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span>
</span><span class='line'>      <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Rendered in </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="si">}</span><span class="s2">s.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Template</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">RenderProfiler</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Template</span><span class="o">.</span><span class="n">ancestors</span>
</span><span class='line'>  <span class="c1">#=&gt; [RenderProfiler, Template, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>注意 include 和 prepend 的区别在于，执行后 ancestors 有明显不同，include 置于后方，而 prepend 置于前方，这就导致了方法查找路径的差异，从而导致 <code>super</code> 执行结果的差异。</p>




<h2>4. Lazy Enumerable</h2>




<p>Lazy Enumerable 可以让 Enumerable 不立即执行，这对函数式编程大有用处，例子如下：</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">natural_numbers</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">Float</span><span class="o">::</span><span class="no">INFINITY</span><span class="p">)</span><span class="o">.</span><span class="n">lazy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">primes</span>
</span><span class='line'>  <span class="n">natural_numbers</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>    <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">))</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">%</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">primes</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>  <span class="c1">#=&gt; [1, 2, 3, 5, 7, 11, 13, 17, 19, 23]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>除了上面 4 大特性，还有一些小的改变，比如:</p>




<ul>
<li>默认使用 <code>utf-8 encoding</code> 解析代码</li>
<li>Symbol 数组 <code>%i(a b c)</code> &#8211;> <code>[:a, :b, :c]</code></li>
<li>新的 GC</li>
<li>Ruby的性能也有所提升</li>
<li>&#8230;</li>
</ul>




<p>Ruby 2.0 让 Ruby 变得愈发性感了，我喜欢。</p>




<p>参考资料</p>




<ul>
<li><a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/</a></li>
<li><a href="http://www.infoq.com/cn/news/2012/11/ruby-20-preview1">http://www.infoq.com/cn/news/2012/11/ruby-20-preview1</a></li>
<li><a href="http://benhoskin.gs/2013/02/24/ruby-2-0-by-example">http://benhoskin.gs/2013/02/24/ruby-2-0-by-example</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升级 Ruby 1.8.7 到 1.9.3]]></title>
    <link href="http://xiewenwei.github.com//blog/2013/01/03/update-ruby-1-8-to-1-9/"/>
    <updated>2013-01-03T22:52:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2013/01/03/update-ruby-1-8-to-1-9</id>
    <content type="html"><![CDATA[<p>这几天对一个大型的 Rails 项目做 Ruby 升级，把升级过程中遇到的几个主要问题和解决方法记录下来以备参考。</p>

<h2>1. 带中文字符的源代码需要加上 utf-8 encoding 声明</h2>

<p>在 Ruby 1.9 中，如果源代码中包含中文字符，必须声明源代码文件的字符集，具体做法是在文件头部增加一个注释行：
<code># encoding: utf-8</code>。</p>

<p>做法很简单，但是当文件量很大时，一个一个手工修改文件也很麻烦，好在有一个 gem -- magic_encoding 可以轻易解决这个烦恼。用法相当简单，通过 <code>gem install magic_encoding</code> 安装 gem，然后在 Rails 项目目录下执行 <code>magic_encoding</code> 命令，它自动把 Rails 项目所有源代码文件头部加上 <code># -*- encoding : utf-8 -*-</code>，非常简单方便。</p>

<p>参考：<a href="https://github.com/m-ryan/magic_encoding">magic_encoding in github</a></p>

<h2>2. 改变 <code>case var when value :</code> 用法</h2>

<p>在 Ruby 1.9 中，象下面这种 case when 语法已经不支持
```ruby
  case var</p>

<pre><code>when 1:
  "value of 1"
when 2,3:
  "value of 2 and 3"
else
  "others"
</code></pre>

<p>  end  <br/>
<code>``
修改很简单，把</code>when value` 后的冒号去掉就行了。</p>

<h2>3. 字符串字符集问题</h2>

<p>在 Ruby 1.9 中，字符串对象带有字符集属性，不同字符集的字符串之间拼接会报异常，通常我们都是用 utf-8 encoding 的字符串，但有些类库返回的字符串返回的字符串并非 utf-8 encoding，这时候可能导致问题，需要做一些额外处理。</p>

<p>例如，Base64 解码后的字符串并不是 utf-8 的，拼接会报异常，需要做一次 force_encoding，看下面的代码。</p>

<p><code>ruby
require 'base64'
s1 = "薄荷网"
puts s1.encoding.to_s
s2 = Base64.encode64(s1)
s3 = Base64.decode64(s2)
puts s3.encoding.to_s
s4 = s3.force_encoding('utf-8')
puts s4.encoding.to_s
puts "#{s3}很棒"
</code>
结果是
<code>ruby
UTF-8
ASCII-8BIT
UTF-8
Encoding::CompatibilityError: incompatible character encodings: ASCII-8BIT and UTF-8
  blabla ...
</code>
所以在 Base64 处理字符串的地方要相当小心。</p>

<h2>4. YAML 引擎改变引起的问题</h2>

<p>Ruby 1.9.3 中，YAML 引擎 由 Syck 改成了 Psych，Psych 和 Syck 在处理 UTF-8 字符串时有明显的区别，详见 <a href="http://galeki.is-programmer.com/posts/32636">Psych、Syck、YAML 和编码</a></p>

<p>总结：把 Ruby 从 1.8 升级到 1.9 还是比较轻松的，遇到的问题比想象中少，而且解决起来都不算麻烦。Ruby 兼容性方法做得很棒，赞一个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重构 NICE 方案程序]]></title>
    <link href="http://xiewenwei.github.com//blog/2012/12/16/refactor-nice-program/"/>
    <updated>2012-12-16T22:42:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2012/12/16/refactor-nice-program</id>
    <content type="html"><![CDATA[<p>最近的工作需要对原有的 NICE 方案生成程序做重构，应用了流水线作业设计模式，让整个 NICE 方案生成代码变得结构清晰，而且易于扩展。</p>

<p>NICE 方案生成程序比较复杂，整体上分成两大步骤：一，根据用户的输入生成评测报告，二，根据用户输入和评测报告构建方案。以前的代码是非常典型的过程式的代码，简单的说就是把生成工作分解成多个步骤，为每一个步骤定义一个方法，然后在一个主控方法中分别调用各个方法。这看起来是比较简单的，但是升级维护变得很困难，比如要增加一个新版本的方案生成方法，不得不在代码中很多地方加入 <code>if else</code> 判断。</p>

<p>这次的工作就是要增加一个新版本的 NICE 方案生成方法，而且要求对之前的所有方案生成提供兼容。考虑再三，不打算在之前的代码上增加许多 <code>if else</code> 完成工作，于是对整个生成代码做一次大的重构。</p>

<p>从工厂流水线的工作方式得到启发，感觉 NICE 的评测和方案生成就象是流水线作业。NICE 评测从输入到评测报告的过程，可以抽象为 input 经过一系列的 analyzer 的处理，最后得到一个 evaluation result的过程。而 NICE 方案可以抽象为，输入是 input 和评测报告，经过一系列 builder 的处理，最后得多一个 solution result.</p>

<p>重构后，NICE 评测生成过程的核心类图如下：
<img src="/images/house/analyzer.png" alt="Analyzer" /></p>

<p>重构后，NICE 评测的主控过程代码：</p>

<p>```ruby</p>

<pre><code>  result = EvaluationResult.new
  # Order of analyzer must be restricted
  [ 
    Evaluation::BodyAnalyzer,
    Evaluation::TagAnalyzer,
    Evaluation::TipAnalyzer
  ].each { |analyzer| analyzer.new(input, result).analyze }

  # save result ...
</code></pre>

<p>```</p>

<p>评测分析过程基类是 Analyzer，BodyAnalyzer，TagAnalyzer 和 TipAnalyzer 都从它继承而来，每一个 Analyzer 完成一部分的评测分析工作。重构之后，扩展评测变得很容易，只要增加一种特定的 Analyzer 即可，而且这个 Analyzer 完全可以从之前的 Analyzer 继承已达到代码复用。</p>

<p>重构后，NICE 方案生成过程的核心类图如下：
<img src="/images/house/builder.png" alt="Analyzer" /></p>

<p>重构后，NICE 评测的主控过程代码：</p>

<p>```ruby</p>

<pre><code>  result = SolutionResult.new      
  input_wrapper = Solution::InputWrapper.new(input)
  # Order of builder must be restricted
  [
    Solution::PreparingBuilder,
    Solution::WeekPlanBuilder, 
    Solution::EatTipBuilder,       
    Solution::ActivityPlanBuilder,        
    Solution::ActTipBuilder,
    Solution::NoticeBuilder
  ].each do |builder|
    builder.new(input_wrapper, result).build
  end

  # save result ...
</code></pre>

<p>```</p>

<p>方案生成过程基类是 Builder，PreparingBuilder，WeekPlanBuilder 和 NoticeBuilder 都从它继承而来，每一个 Builder 完成一部分的方案生成工作。</p>

<p>流水线作业的设计模式很适合象 NICE 方案生成的工作，它的特点是：整体过程复杂，可以分解为多个类似的步骤，这些步骤共享相同的输入和输出对象。使用这种设计模式后，代码结果变成简单清晰，而且易于扩展维护。</p>
]]></content>
  </entry>
  
</feed>
