<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 程序人生]]></title>
  <link href="http://xiewenwei.github.com//blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://xiewenwei.github.com//"/>
  <updated>2015-05-27T18:27:14+08:00</updated>
  <id>http://xiewenwei.github.com//</id>
  <author>
    <name><![CDATA[vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 中 mattr_accessor 一处文档错误]]></title>
    <link href="http://xiewenwei.github.com//blog/2015/01/11/mattr-accessor-in-ruby-on-rails-activesupport/"/>
    <updated>2015-01-11T21:49:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2015/01/11/mattr-accessor-in-ruby-on-rails-activesupport</id>
    <content type="html"><![CDATA[<h2>发现错误</h2>

<p>最近写一个 gem 的时候偶然接触到 Rails ActiveSupport 扩展 module 的 mattr_accessor 系列方法，包括 mattr_accessor、mattr_reader 和 mattr_writer。
记得以前探索 Rails 源代码的时候经常遇到 mattr_accessor 方法，当时并没有细究，这次碰巧要自己用到，所以仔细研究了其文档和实现源码，居然发现文档描述有明显的错误。</p>

<p>Rails 的官方文档中提到，mattr_accessor 用于为类属性定义类和实例对象两者的访问器，然后还提供一段示例代码演示其用法。</p>

<p><code>ruby
mattr_accessor(*syms, &amp;blk) public
Defines both class and instance accessors for class attributes.
</code>
演示代码如下：
```ruby</p>

<pre><code>module HairColors
  mattr_accessor :hair_colors
end

class Person
  include HairColors
end

Person.hair_colors = [:brown, :black, :blonde, :red]
Person.hair_colors     # =&gt; [:brown, :black, :blonde, :red]
Person.new.hair_colors # =&gt; [:brown, :black, :blonde, :red]
</code></pre>

<p>```</p>

<p>当我运行该代码的时候，发现无法运行，报错在 <code>Person.hair_colors</code> 处，信息如下：</p>

<p><code>ruby
[5] pry(main)&gt; Person.hair_colors = [:brown, :black, :blonde, :red]
NoMethodError: undefined method `hair_colors=' for Person:Class
from (pry):7:in `__pry__'
</code></p>

<p>刚开始还有点不相信，分别在 Rails 4.1.8，4.2.0 和 3.2.x，Ruby 1.9.3，2.0.0 和 2.1.5 下运行， 都出现这个错误，这下确信文档描述应该是有问题的。我想把问题彻底搞清楚，于是仔细查看 Rails ActiveSupport 中相关的源代码，发现的确是文档描述的行为和程序实际行为不符。</p>

<h2>探寻原因</h2>

<p>mattr_accessor 系列方法的代码在 <code>rails/activesupport/lib/active_support/core_ext/module/attribute_accessors.rb</code> 文件中，相关的代码并不复杂，部分代码如下：</p>

<p>```ruby
  # 此处忽略注释
  def mattr_writer(*syms)</p>

<pre><code>options = syms.extract_options!
syms.each do |sym|
  raise NameError.new("invalid attribute name: #{sym}") unless sym =~ /^[_A-Za-z]\w*$/
  class_eval(&lt;&lt;-EOS, __FILE__, __LINE__ + 1)
    @@#{sym} = nil unless defined? @@#{sym}

    def self.#{sym}=(obj)
      @@#{sym} = obj
    end
  EOS

  unless options[:instance_writer] == false || options[:instance_accessor] == false
    class_eval(&lt;&lt;-EOS, __FILE__, __LINE__ + 1)
      def #{sym}=(obj)
        @@#{sym} = obj
      end
    EOS
  end
  send("#{sym}=", yield) if block_given?
end
</code></pre>

<p>  end</p>

<p>  # 此处忽略注释
  def mattr_accessor(*syms, &amp;blk)</p>

<pre><code>mattr_reader(*syms, &amp;blk)
mattr_writer(*syms, &amp;blk)
</code></pre>

<p>  end</p>

<p>```</p>

<p>从中可以看到，mattr_accessor 分别 call mattr_reader 和 mattr_writer，mattr_writer 的主要逻辑是定义类变量（class variable，命名为 <code>@@#{sym}</code>），然后定义类方法 （见 <code>def self.#{sym}=(obj)</code>）和普通实例方法（见 <code>def #{sym}=(obj)</code>）。当 <code>Person include HairColors</code> 的时候，普通实例方法是 mix 进 Person 的，但类方法并不会被 mix 进 Person。可以用下面更简明的例子演示 include module 并不能 mix 类方法。</p>

<p>```ruby
  module Foo</p>

<pre><code>def method1
  puts "method1 in Foo"
end

def self.method2
  puts "method2 in Foo as class method"
end
</code></pre>

<p>  end</p>

<p>  class Bar</p>

<pre><code>include Foo
</code></pre>

<p>  end</p>

<p>  Bar.new.method1  # => "method1 in Foo"</p>

<p>  Foo.method2 # => "method2 in Foo as class method"</p>

<p>  Bar.method2 # => NoMethodError: undefined method `method2' for #&lt;Bar:0x007fdb0a121488>
```</p>

<p>原来 mattr_accessor 为 HairColors 生成的 <code>def self.hair_colors</code> 类方法不能 mix 进 Person，从而导致 Person.hair_colors 出错，但是 Person.new.hair_colors 能够正常运行的。</p>

<h2>解决方法</h2>

<p>如果希望 Person 通过类方法和实例方法都能使用 hair_colors ，应该怎么做呢？
可以把 mattr_accessor 放在 included 钩子中执行，代码如下所示：</p>

<p>```ruby</p>

<pre><code>module HairColors
  extend ActiveSupport::Concern
  included do
    mattr_accessor :hair_colors
  end
end

class Person
  include HairColors
end

Person.hair_colors = [:brown, :black, :blonde, :red]
Person.hair_colors     # =&gt; [:brown, :black, :blonde, :red]
Person.new.hair_colors # =&gt; [:brown, :black, :blonde, :red]
HairColors.hair_colors # =&gt; undefined method `hair_colors' for HairColors:Module
</code></pre>

<p>```</p>

<p>它的一个问题是 <code>HairColors.hair_colors</code> 不可用了，但我发现 Rails 中大多是使用这种手法处理的，这种情况下估计不怎么要直接用到 <code>HairColors.hair_colors</code> 吧。</p>

<h2>总结</h2>

<p>Rails 官方文档中关于 mattr_accessor 的描述的确有问题，示例代码不能正确运行，而且还会误导使用者，通过仔细探索 Rails 的源代码，找到了问题的源头。我已经修正文档的错误，提交了 <code>pull request</code>，希望能够被接受。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 中 MySQL 分区表使用的一个注意事项]]></title>
    <link href="http://xiewenwei.github.com//blog/2014/12/14/mysql-partition-table-in-rails/"/>
    <updated>2014-12-14T22:46:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2014/12/14/mysql-partition-table-in-rails</id>
    <content type="html"><![CDATA[<p>MySQL 的分区表是一种简单有效的处理极大数据表的特性，通过它可以使应用程序几乎很少改动就能达成对极大数据表的高效处理，但由于 Rails ActiveRecord 设计上一些惯例，可能导致一些数据处理不能利用分区表特性，反而变得很慢，在使用分区表过程中一定要多加注意。</p>

<p>下面以一个例子来说明。在 light 系统中，有一张数据表是 diet_items, 主要字段是 id, schedule_id, meal_order food_id, weight, calory 等等，它的每一条记录表示为用户生成每日的减肥计划（减肥食谱 + 运动计划）中的一条饮食项，平均一条的计划有 10 多条数据，数据量非常大，预计每天生成数据会超过 100 万条，所以对其做了分表处理，根据 schedule_id hash 分成 60 张表，也就是数据将动态分到 60 张表中。分表后 diet_items 的建表语句如下所示：</p>

<p><code>sql
CREATE TABLE `diet_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `schedule_id` int(11) NOT NULL,
  `meals_order` int(11) NOT NULL,
  `food_id` int(11) DEFAULT NULL,
  ....
  KEY id (`id`),
  UNIQUE KEY `index_diet_items_on_schedule_id_and_id` (`schedule_id`,`id`)
)
PARTITION BY HASH (schedule_id)
PARTITIONS 60;
</code>
分表之后，所有查询 diet_items 的地方都要求带上 schedule_id，比如获取某一个 schedule 的所有 diet_items，通过 schedule. diet_items，获取某一个 id 的 diet_item 也是通过  <code>schedule.diet_items.find(id)</code> 进行。生成 diet_item 也没有问题，因为生成 diet_item 都是通过 <code>schedule.diet_items.build(data)</code> 方式，在生成的时候都是带了 schedule_id 的。</p>

<p>观察 newrelic 日志，发现 diet_item 的 update 和 destroy 相关的请求特别慢，仔细分析后，发现这两种操作非常忙是由于 ActiveRecord 生成的 sql 并没有带 schedule_id 导致。
diet_item update 操作 ActiveRecord 生成的 sql 语句类似于 <code>update diet_items set … where id = &lt;id&gt;</code>。
diet_item destroy 生成的语句类似于 <code>delete diet_items where id = &lt;id&gt;</code>
因为没有带 schedule_id，导致这两种语句都需要 mysql 扫描 60 张分区表才能够完成一个语句执行，非常慢！</p>

<p>知道原因之后就好办了，把原来的 update 和 destroy 调用改为自定义版本的 update 和 destroy 调用就可以了。</p>

<ul>
<li><p><code>diet_item.update(attributes)</code> 改成 <code>DietItem.where(id: diet_item.id, schedule_id: diet_item.schedule_id).update_all(attributes)</code></p></li>
<li><p><code>diet_item.destroy</code> 改成 <code>DietItem.where(id: diet_item.id, schedule_id: diet_item.schedule_id).delete_all</code></p></li>
</ul>


<p>这样生成的 sql 都带上 schedule_id 条件，从而避免了扫描全部的分区表，性能提升立竿见影。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何解决 Rails 中同时修改冲突]]></title>
    <link href="http://xiewenwei.github.com//blog/2014/11/16/how-to-resolve-updating-conflict-in-rails/"/>
    <updated>2014-11-16T22:51:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2014/11/16/how-to-resolve-updating-conflict-in-rails</id>
    <content type="html"><![CDATA[<p>Rails 应用程序中操作冲突是一个常见问题，Rails 提供了简单有效的解决方法。</p>

<p>举一个实际的例子：我们的系统里有一个商店模块，商店中重要的一块是对产品信息的管理，比如运营人员常常会编辑产品的信息，包括产品标题，营销口号和价格等等。因为修改十分频繁，碰巧同时编辑提交修改的话，就会偶尔遇到修改丢失的问题，运营人员 A 修改产品标题，运营人员 B 修改价格，A 和 B 提交修改都提示修改成功，但是结果上只是 A 的修改结果生效，B 的修改被 A 的修改冲掉了。</p>

<p>仔细研究原因，发现是因为修改功能缺少操作冲突机制，而修改操作同时发生导致了问题。
如下图所示，A 和 B 同时从数据库中查询数据，在 web 页面中修改同样的数据，提交保存时是以 web 页面中提交的数据为准，从而导致 A 的修改把 B 的修改给覆盖了。</p>

<p><img src="/images/house/rails_conflict.png" alt="A和B修改冲突" /></p>

<p>Rails 的 乐观锁<a href="http://api.rubyonrails.org/classes/ActiveRecord/Locking/Optimistic.html">Optimistic Locking</a> 是解决这个问题的有力工具，它的原理是在数据库表中增加一个字段（默认是 lock_version，可配置）记录数据的版本号，每个提交的修改都带上这个版本号，在真正 update 修改数据之前，先判断提交的 lock_version 数据和数据库中的是否一致，如果不一致，则认为发生数据冲突，将抛出 <code>ActiveRecord::StaleObjectError</code> 异常，这样程序就可以捕获这个异常，提醒用户发生了冲突，由用户去协调解决冲突。</p>

<p>相关示例代码如下所示：</p>

<p>```ruby</p>

<h1>migration: add lock_version to products</h1>

<p>add_column :products, :lock_version, :integer, defalut: 0</p>

<h1>update product with StaleObjectError checking</h1>

<p>begin
  product.update(params[:product])
rescue ActiveRecord::StaleObjectError
  render 'confilct'
end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveSupport::Concern 的工作原理]]></title>
    <link href="http://xiewenwei.github.com//blog/2014/01/13/how-activesupport-corncern-work/"/>
    <updated>2014-01-13T00:29:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2014/01/13/how-activesupport-corncern-work</id>
    <content type="html"><![CDATA[<p>去年有一次的周记分享过 ActiveSupport::Concern （以下简称 Concern） 的用法，但是对它的实现原理一直不太明白，周末把它的实现源码仔细研究了一番，总算比较深入了解了它的工作原理，同时也让我对 Ruby 元编程有了更深的了解。</p>

<p>Concern 主要用于解决 module mix 的依赖问题，同时简化 module mix 的步骤。
关于依赖问题，必须用一个例子才好说明：</p>

<p>```ruby
module Foo
  def self.included(base)</p>

<pre><code>base.class_eval do
  def self.method_injected_by_foo
    ...
  end
end
</code></pre>

<p>  end
end</p>

<p>module Bar
  include Foo
  def self.included(base)</p>

<pre><code>base.method_injected_by_foo
</code></pre>

<p>  end
end</p>

<p>class Host
  include Foo # We need to include this dependency for Bar
  include Bar # Bar is the module that Host really needs
end
```</p>

<p>上面例子中 Host 为了 include Bar，必须得先 include Bar 依赖的 Foo，这是因为 Bar 在 include Foo 时，只是为 Bar extend method_injected_by_foo 方法，所以 Host 必须显式的 include Foo，才能够 extend method_injected_by_foo 方法。</p>

<p>使用 Concern 后，代码可以简写为</p>

<p>```ruby
require 'active_support/concern'</p>

<p>module Foo
  extend ActiveSupport::Concern
  included do</p>

<pre><code>class_eval do
  def self.method_injected_by_foo
    ...
  end
end
</code></pre>

<p>  end
end</p>

<p>module Bar
  extend ActiveSupport::Concern
  include Foo</p>

<p>  included do</p>

<pre><code>self.method_injected_by_foo
</code></pre>

<p>  end
end</p>

<p>class Host
  include Bar # works, Bar takes care now of its dependencies
end
```</p>

<p>Bar 和 Foo 都 <code>extend ActiveSupport::Concern</code> 后，Host include Bar 已经不需要事先 mix Foo。</p>

<p>这是怎么做到的呢，看看 Concern 的代码，其实代码很少：</p>

<p>```ruby
module
  module Concern</p>

<pre><code>def self.extended(base)
  base.instance_variable_set("@_dependencies", [])
end

def append_features(base)
  if base.instance_variable_defined?("@_dependencies")
    base.instance_variable_get("@_dependencies") &lt;&lt; self
    return false
  else
    return false if base &lt; self
    @_dependencies.each { |dep| base.send(:include, dep) }
    super
    base.extend const_get("ClassMethods") if const_defined?("ClassMethods")
    if const_defined?("InstanceMethods")
      base.send :include, const_get("InstanceMethods")
      ActiveSupport::Deprecation.warn "The InstanceMethods module inside ActiveSupport::Concern will be " \
        "no longer included automatically. Please define instance methods directly in #{self} instead.", caller
    end
    base.class_eval(&amp;@_included_block) if instance_variable_defined?("@_included_block")
  end
end

def included(base = nil, &amp;block)
  if base.nil?
    @_included_block = block
  else
    super
  end
end
</code></pre>

<p>  end
end
```</p>

<p>关键部分是 <code>append_features</code> 方法，通过阅读 ruby 的文档和源码得知，ruby 在 include 一个 module 时，实际会触发两个方法，一个是 append_features，进行实际的 mixing 操作，包括增加常量，方法和变量到模块中，另外一个是 included 方法，也就是我们常用来作为 include 钩子的方法，默认的 included 是一个空方法，我们通过重载它使钩子起作用。</p>

<p>从代码可知，当一个模块 <code>extend ActiveSupport::Concern</code> 时，将产生 3 个影响：</p>

<ol>
<li>为模块设置了一个实例变量</li>
</ol>


<p>变量为 @_dependencies，其值为空数组，表示依赖的模块，将在 append_features 中用到；</p>

<ol>
<li>append_features 方法被重载；</li>
</ol>


<p>重载后行为有了很大变化，它的处理分两种情况：
一种是当它被一个有 @<em>dependencies 实例变量的模块被 include 时，直接把自身加到 @</em>dependencies 中，
比如当 Bar include Foo 时，将触发 Foo 的 append_features(base) 方法，此时 base 是 Bar，self 是 Foo，由于 Bar 已经 <code>extend ActiveSupport::Concern</code>，Bar 的 @<em>dependencies 有定义，所以直接把 Foo 加到 Bar 的 @</em>dependencies 中，然后直接返回，没有立即执行 mixing 操作。</p>

<p>当 Host include Bar 时，将触发 Bar 的 append_features(base) 方法，此时
base 是 Host，self 是 Bar，Host 没有 <code>extend ActiveSupport::Concern</code>，所以 Host 的 @<em>dependencies 无定义，将执行下面的分支，首先 include Foo（通过 Bar 的 @</em>dependencies 获得 ），然后 include Bar (通过 super)，然后是后续操作。</p>

<ol>
<li>included 方法被重载；</li>
</ol>


<p>included 的动作比较简单，如果以没有参数形式调用，将把 block 存放到 @<em>included_block 变量中，@</em>included_block 的 block 将在 append_features 方法中使用。</p>

<p>通过施加的这 3 个影响，ActiveSupport::Concern 完成了它的全部功能，非常简洁精练。</p>

<p>从中学到的东西，包括：</p>

<ol>
<li><p>module 中 append_features 和 included 方法时 include 的核心；</p></li>
<li><p>可以通过覆盖这些方法改变操作的行为；</p></li>
<li><p>可以定义模块实例变量存储属于该模块的一些数据；</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
