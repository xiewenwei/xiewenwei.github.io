<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cache | 程序人生]]></title>
  <link href="http://xiewenwei.github.com//blog/categories/cache/atom.xml" rel="self"/>
  <link href="http://xiewenwei.github.com//"/>
  <updated>2016-02-21T22:00:43+08:00</updated>
  <id>http://xiewenwei.github.com//</id>
  <author>
    <name><![CDATA[vincent]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[缓存可能让你的应用更慢1 - 缓存使用的 N+1 问题]]></title>
    <link href="http://xiewenwei.github.com//blog/2015/05/27/cache-trap/"/>
    <updated>2015-05-27T17:43:00+08:00</updated>
    <id>http://xiewenwei.github.com//blog/2015/05/27/cache-trap</id>
    <content type="html"><![CDATA[<p>缓存是提升系统性能非常有效的手段，常常起到立竿见影的效果，但是有时不恰当的使用不但起不到优化效果，反而可能让系统更慢。下面总结缓存使用过程中常见的一些陷阱。</p>

<hr />

<p>大家应该比较熟悉数据库查询时的 N+1 问题，在缓存中同样存在 N+1 问题。当应用中出现需要多次读取缓存的时候，虽然单次读取缓存速度很快，但是多次读取缓存累计时间相当可观，很可能会成为一个性能瓶颈。</p>

<p>直接给一个演示例子，生成 10000 个缓存对象 user:<i>:counter 存储整数，然后分别单次，批量读取缓存，统计每种方式消耗时间。</p>

<p>代码如下所示：</p>

<p>```ruby
n = 10000
n.times {|i| Rails.cache.write "user:#{i}:counter", i * i }</p>

<p>def read_by_batch(total, batch_size)
  array = []
  total.times do |i|</p>

<pre><code>if i + 1 % batch_size == 0
  Rails.cache.read_multi *array
  array = []
else
  array &lt;&lt; "user:#{i}:counter"
end
</code></pre>

<p>  end
end</p>

<p>Benchmark.bm do |x|
  x.report "  1" do</p>

<pre><code>n.times do |i|
  Rails.cache.read "user:#{i}:counter"
end
</code></pre>

<p>  end</p>

<p>  x.report " 10" do</p>

<pre><code>read_by_batch n, 10
</code></pre>

<p>  end</p>

<p>  x.report " 30" do</p>

<pre><code>read_by_batch n, 30
</code></pre>

<p>  end</p>

<p>  x.report " 50" do</p>

<pre><code>read_by_batch n, 50
</code></pre>

<p>  end</p>

<p>  x.report "100" do</p>

<pre><code>read_by_batch n, 100
</code></pre>

<p>  end
end
```</p>

<p>执行结果如下所示：</p>

<p>```bash</p>

<pre><code>   user     system      total        real
</code></pre>

<p>  1  0.910000   0.210000   1.120000 (  1.316800)
 10  0.010000   0.000000   0.010000 (  0.013985)
 30  0.010000   0.000000   0.010000 (  0.009109)
 50  0.010000   0.000000   0.010000 (  0.009200)
100  0.040000   0.010000   0.050000 (  0.044768)
```</p>

<p>从结果中可以看到，分批读取（每次 30~50时）速度很快，要比每次 1 个对象快 100 多倍，每次读取 10 个对象也要快 100 倍，批次并不是越大越好，每次读取 100 个速度比 10 个更慢。</p>

<p>在薄荷生产系统性能优化中，我们遇到过好几次类似的问题。例如有一个 api 需要返回多个存放缓存的用户资料，单个用户资料缓存读取时间接近 1 ms，50 个用户资料消耗接近 45 ms 时间，它导致这个 api 响应时间很长，把 50 次用户资料缓存读取放到一次批量读取后，缓存读取时间减少为 3 ms 左右，应用性能立即大幅提升。</p>

<p>为什么批量读取时间消耗大幅减少呢？因为每一次缓存读取过程有很多固定开销，包括加锁，系统（网络）调用等等，当使用批量读取时，这些固定开销统统节省了，而缓存服务器单次 key 查找和数据返回消耗时间差别不大，所以整体时间大幅减少。</p>

<p>当然，批量读取增加了应用的复杂度，如果应用性能没有问题，或者缓存读取次数很少，并没有必要改造成批量读取形式。</p>

<p>最后一点是，通常我们以 fetch 方法使用缓存对象，这时批量读取方法如下所示：</p>

<p>```ruby
  keys = user_ids.map { |user_id| "user:#{user_id}" }</p>

<p>  user_hash = Rails.cache.fetch_multi(*keys) do |key|</p>

<pre><code>User.find_by_id key.gsub('user:', '')
</code></pre>

<p>  end
```</p>

<p>总结：缓存虽然很快，但它毕竟也是一次 IO 操作，同样需要消耗一定时间，如果某一次特别大量读写缓存，很可能会以前性能问题，通过批量读取方式是解决该问题的有效手段。</p>

<p>这是“缓存使用陷阱”系列文章的第 1 篇，接下来还会带来：
* 2. 空数据导致缓存失效
* 3. 缓存大量无用数据导致内存浪费
* 4. 过度使用缓存
* 5. 把缓存当成存储使用导致数据丢失</p>

<p>希望分享薄荷系统中遇到并解决的一些问题，能够对大家有所帮助。
薄荷正在招聘 ruby 伙伴，有兴趣请看 https://ruby-china.org/topics/25585 。</p>
]]></content>
  </entry>
  
</feed>
